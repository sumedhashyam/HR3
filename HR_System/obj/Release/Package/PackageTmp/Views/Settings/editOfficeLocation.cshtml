@model DAO.EmployeeLocation

@{
    ViewBag.Title = "editOfficeLocation";
    Layout = "~/Views/Shared/Main_Layout.cshtml";
    string read = "";
    MembershipUser user = Membership.GetUser();
    if (user == null)
    {
        Response.Redirect("/Account/Logon");
    }
    string[] role = Roles.GetRolesForUser(user.UserName);
    foreach (var r in role)
    {
        if (r.ToLower() == "superadmin")
        {
            read = "";
        }
        else
        {
            read = "ReadOnly";
        }
    }
}

@*<h2>Edit Office Location</h2>*@
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<script>
    var firstTime = true;
    var selectedCity = "";
    $(document).ready(function () {
        $('#navigation li').removeClass('active');
        $('#msetup').addClass('active');

        selectedCity = $('#CityID').val();
        initilizeCityddl();
        var countryDDL = $('#CountryID');
        getCities(countryDDL);
    });
    function getCities(ddl) {
        var countryid = $(ddl).val();
        if (countryid != "") {
            var url = settingController + "getCities";

            doAjax(url, { countryid: countryid }, function (data) {
                $('#CityID').html('');
                $.each(data, function (key, val) {
                    $('#CityID').append("<option  value='" + val.Value + "'>" + val.Text + "</option>");
                    //$('#CityID').append("<option selected='" + val.selected + "' value='" + val.Value + "'>" + val.Text + "</option>");
                });
                if (firstTime) {
                    firstTime = false;
                    $('#CityID').val(selectedCity);
                }
            });
        } else {
            initilizeCityddl();

        }
    }

    function initilizeCityddl() {
        $('#CityID').html('');
        $('#CityID').html(' <option value="">Select City</option>');
    }
</script>
<div class="mws-panel grid_8" style="text-align: right; box-shadow: none;">
   @* @Html.ActionLink("Back", "OfficeLocation", "Settings", null, new { @class = "btn btn-primary" })*@
</div>
<div class="mws-panel grid_8">
    <div class="mws-panel-header">
        <div class="toolbar">
           @Html.ActionLink("Back", "OfficeLocation", "Settings", null, new { })
        </div>
        <span><i class="icon-ok"></i>Edit Office Location</span>
    </div>
    <div class="mws-panel-body no-padding">
        @using (Html.BeginForm("editOfficeLocation", "Settings", FormMethod.Post, new { @class = "mws-form" }))
        {
            @Html.ValidationSummary(true)
  
            @Html.HiddenFor(model => model.LocationID)
            <div id="mws-validate-error" class="mws-form-message error" style="display: none;"></div>
            <div class="mws-form-inline">
                <form class="form-horizontal">
                    
                    <div class="mws-form-row">
                        <label class="mws-form-label">Select Country</label>
                        <div class="mws-form-item">
                            @{ List<SelectListItem> locationList = (List<SelectListItem>)ViewData["countryList"];
                            }
                            
                            @if(read=="")
                            {
                            @Html.DropDownListFor(a => a.CountryID, locationList, new { @class = "grid_3 required", onchange = "getCities(this)" })
                            @Html.ValidationMessageFor(model => model.CountryID)
                            }
                            
                            else
                            {
                                @Html.HiddenFor(model=>model.CountryID)
                                if(ViewBag._CountryName!=null)
                                {
                                <input type="text" value="@ViewBag._CountryName" readonly="true" class="grid_3" />
                                }
                            }
                             
                           
                             

                        </div>
                    </div>
                    <div class="mws-form-row">
                        <label class="mws-form-label">Select City</label>
                        <div class="mws-form-item">
                            @{ List<SelectListItem> citylist = (List<SelectListItem>)ViewData["citylist"];
                            }
                            @Html.DropDownListFor(model => model.CityID, citylist, new { @class = "grid_3 required" })
                            @Html.ValidationMessageFor(model => model.CityID)


                        </div>
                    </div>

                    <div class="mws-form-row">
                        <label class="mws-form-label">Location Name</label>
                        <div class="mws-form-item">


                            @Html.TextBoxFor(model => model.LocationName, new { @class = "grid_3 required" ,})
                            @Html.ValidationMessageFor(model => model.LocationName)


                        </div>
                    </div>


                    <div class="mws-form-row">

                        <div class="mws-form-item">
                            <button type="submit" class="btn btn-primary">Save changes</button>
                            @Html.ActionLink("Cancel", "officeLocation", new { }, new { @class = "btn" })
                        </div>
                    </div>
                </form>
            </div>   
    
   
    

        }
    </div>
</div>
